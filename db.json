{
  "users": [
    {
      "id": "1",
      "email": "test@example.com",
      "password": 123456,
      "firstName": "Test",
      "lastName": "User",
      "readPosts": [
        1,
        2,
        4,
        "3",
        "6",
        "5",
        "7",
        "8574",
        "b7bb"
      ]
    },
    {
      "id": "2965",
      "firstName": "John",
      "lastName": "Doe",
      "email": "johndoe@example.com",
      "password": "123456",
      "readPosts": [
        3,
        5,
        6,
        8
      ]
    },
    {
      "id": "813b",
      "firstName": "JohnCena",
      "lastName": "Otieno",
      "email": "otis@gmail.com",
      "password": "otis@123",
      "readPosts": [
        2,
        4,
        6,
        7,
        9
      ]
    },
    {
      "id": "7137",
      "firstName": "Dave",
      "lastName": "123",
      "email": "123@gmail.edu124444",
      "password": "1234567",
      "readPosts": [
        1,
        3,
        5,
        7,
        9
      ]
    },
    {
      "id": "c2cd",
      "firstName": "Reddick",
      "lastName": "Two",
      "email": "red@gmail.com",
      "password": "123456",
      "readPosts": []
    },
    {
      "id": "4638",
      "firstName": "Deborah",
      "lastName": "Koskei",
      "email": "darbiekossy@gmail.com",
      "password": "123456",
      "readPosts": [
        "6",
        "5",
        null
      ]
    },
    {
      "id": "a19a",
      "firstName": "Dave",
      "lastName": "o2",
      "email": "dave@gmail.com",
      "password": "123456",
      "readPosts": [
        "6",
        "5"
      ]
    },
    {
      "id": "da87",
      "firstName": "mike",
      "lastName": "otieno",
      "email": "mikeoti@gmail.com",
      "password": "123456",
      "readPosts": [
        "3",
        "2"
      ]
    },
    {
      "id": "65b5",
      "firstName": "Ian",
      "lastName": "Evans",
      "email": "ian@gmail.com",
      "password": "123Ian4",
      "readPosts": [
        "3",
        "6",
        "2",
        "5",
        "7"
      ]
    }
  ],
  "posts": [
    {
      "id": "1",
      "title": "Getting Started with Vue 3",
      "body": "Vue 3 is a major evolution of the Vue.js framework. It introduces the Composition API, which provides a more flexible and powerful way to organize component logic. The Composition API allows developers to encapsulate logic into reusable functions, called composables, making large-scale applications easier to manage. In addition, Vue 3 boasts improved performance due to a rewritten virtual DOM and better tree-shaking capabilities. With native support for TypeScript and a smaller runtime footprint, Vue 3 is optimized for both performance and maintainability. This guide will walk you through creating your first app, setting up components, and using reactive data effectively. We'll also explore migration tips from Vue 2 to Vue 3, community tooling updates, and how Vue 3 plays with modern bundlers like Vite and Webpack.",
      "author": "Rovenel",
      "publishedAt": "2025-06-10T09:00:00Z",
      "userId": ""
    },
    {
      "id": "2",
      "title": "Understanding Reactivity in Vue",
      "body": "Reactivity lies at the heart of Vue. In Vue 3, it's implemented using JavaScript Proxies, which allow Vue to intercept and track changes to data properties. This enables efficient updates to the DOM when reactive data changes. The `ref()` and `reactive()` functions are core to creating reactive references and objects. Developers can also use `computed()` for derived state and `watch()` for side effects. Understanding these tools is essential for building dynamic UIs. The best way to grasp Vue reactivity is by building small examples and observing how Vue tracks and updates data in real time. We'll explore edge cases, performance tips, and how to integrate reactivity into complex component trees.",
      "author": "Jane Doe",
      "publishedAt": "2025-06-15T14:30:00Z",
      "userId": ""
    },
    {
      "id": "3",
      "title": "Routing in Vue with Vue Router",
      "body": "Vue Router is the official router for Vue.js and enables developers to create Single Page Applications with dynamic routing. With Vue Router, you can map routes to components, create nested routes, use navigation guards, and pass parameters or query strings between pages. Lazy-loading components via route-level code splitting helps improve performance. Vue Router also supports named views and programmatic navigation using `router.push`, `router.replace`, and `router.back`. This article walks through setting up a basic router, defining routes in a separate file, linking between pages with `<router-link>`, and handling navigation dynamically. We'll also troubleshoot common routing issues and best practices for route design in large applications.",
      "author": "John Smith",
      "publishedAt": "2025-06-18T11:45:00Z",
      "userId": ""
    },
    {
      "id": "4",
      "title": "Handling Forms in Vue",
      "body": "Handling user input is critical in any application. Vue provides the `v-model` directive for two-way binding of form inputs. You can use `v-model` on input fields, textareas, checkboxes, radio buttons, and even select dropdowns. Under the hood, `v-model` is syntactic sugar for setting a value and listening to input events. For custom components, you can create a custom `v-model` binding using `modelValue` and `@update:modelValue`. This article also covers form validation using native constraints and third-party libraries like Vuelidate or vee-validate, as well as managing form submission via the `@submit.prevent` directive. We'll look at advanced validation strategies, dynamic forms, and accessibility tips.",
      "author": "Ian Evans",
      "publishedAt": "2025-06-21T08:20:00Z",
      "userId": "65b5"
    },
    {
      "id": "5",
      "title": "Vue Lifecycle Hooks Explained",
      "body": "Vue components go through a predictable lifecycle—from creation to destruction. Understanding these hooks is key to managing side effects like fetching data or setting intervals. Lifecycle hooks such as `onMounted`, `onUpdated`, and `onUnmounted` replace the old `mounted`, `updated`, and `destroyed` options in the Composition API. Other hooks like `onBeforeMount`, `onBeforeUpdate`, and `onBeforeUnmount` are useful for debugging and setup. This post provides real-world use cases and explains how to clean up side effects properly using `onUnmounted` to prevent memory leaks in your application. We'll also explore common anti-patterns and how to use lifecycle hooks with Vue transitions and third-party libraries.",
      "author": "Ali Khan",
      "publishedAt": "2025-06-25T12:00:00Z",
      "userId": ""
    },
    {
      "id": "6",
      "title": "Deploying Vue Apps",
      "body": "Once you've built your Vue app, deploying it to the web is the next step. Vue apps can be deployed to platforms like Netlify, Vercel, or GitHub Pages using simple build commands. This guide walks you through setting up continuous deployment with GitHub, creating production builds with `npm run build`, and configuring custom domains. It also discusses environmental variables, build optimizations, and resolving common deployment issues like 404s on refresh (solved using `history` mode with fallback rewrites). We'll walk through best practices for SEO, asset preloading, and error tracking in production.",
      "author": "Ian Evans",
      "publishedAt": "2025-06-27T16:10:00Z",
      "userId": "65b5"
    },
    {
      "id": "7",
      "title": "Creating a Blog with Vue and JSON Server",
      "body": "Rapid prototyping is essential for testing ideas. JSON Server is a fantastic tool that creates a full REST API from a simple JSON file, making it easy to mock data. When paired with Vue, it allows developers to simulate a real backend. This post guides you through setting up JSON Server, creating and reading posts via HTTP requests using Axios or Fetch, and handling routes, parameters, and dynamic segments in your frontend. This setup is ideal for creating MVPs or frontend-only apps with realistic data interactions. We'll also show how to use JSON Server's watch mode, add delay simulation for loading states, and use custom routes for filtered responses.",
      "author": "Rovenel",
      "publishedAt": "2025-06-29T10:30:00Z",
      "userId": ""
    },
    {
      "id": "8",
      "title": "Styling Vue Components",
      "body": "Vue offers a variety of ways to apply styles to components. With scoped CSS, styles are applied only to the component they're defined in, preventing global clashes. CSS Modules provide a similar isolation but with hashed class names. Vue also supports integrating with popular frameworks like Tailwind CSS, Bootstrap, or Bulma. This article explores best practices for managing component styles, including dynamic classes, conditional styles with `:class` and `:style`, and using preprocessors like Sass. A section is dedicated to handling dark mode and media queries within components. You'll also learn how to extract and reuse styles with layout components and themes.",
      "author": "Emma Li",
      "publishedAt": "2025-07-01T13:45:00Z",
      "userId": ""
    },
    {
      "id": "9",
      "title": "Best Practices for Component Communication",
      "body": "In Vue, components can communicate using props, emits, provide/inject, and even global event buses. Choosing the right pattern depends on the relationship between components. For parent-child, `props` and `emits` are sufficient. For deeply nested components, `provide/inject` can simplify passing values. This guide compares different patterns with real-life examples. It also includes tips on avoiding prop drilling, properly validating props, and using composables to share logic. You’ll also see how to create custom hooks to centralize logic and improve maintainability. We wrap up with guidelines for scalable architectures and avoiding tight coupling between components.",
      "author": "Daniel Njoroge",
      "publishedAt": "2025-07-03T15:55:00Z",
      "userId": ""
    },
    {
      "id": "b7bb",
      "title": "Why Vue.js Became My Favorite JavaScript Framework",
      "body": " Its clean syntax, ease of use, and clear documentation helped me build apps faster with fewer bugs. The reactive data system just works, and the single-file components make organization simple. For both beginners and pros, Vue offers a smooth and powerful development experience. It's now my go-to framework for side projects and freelance work.",
      "author": "Test User",
      "publishedAt": "2025-08-08T07:26:56.958Z",
      "userId": "1"
    }
  ],
  "comments": [
    {
      "id": "1",
      "author": "Jane",
      "text": "Very helpful post, thanks!",
      "postId": "1"
    },
    {
      "id": "2",
      "author": "Ken",
      "text": "Vue 3 looks amazing!",
      "postId": "1"
    },
    {
      "id": "3",
      "author": "Mary",
      "text": "I finally understand Composition API now.",
      "postId": "1"
    },
    {
      "id": "1",
      "author": "Emma",
      "text": "The proxy explanation was super clear.",
      "postId": "2"
    },
    {
      "id": "2",
      "author": "Ali",
      "text": "Now I finally understand reactivity!",
      "postId": "2"
    },
    {
      "id": "1",
      "author": "Carlos",
      "text": "Exactly what I needed for my project.",
      "postId": "3"
    },
    {
      "id": "2",
      "author": "Susan",
      "text": "The examples were very clear.",
      "postId": "3"
    },
    {
      "id": "1",
      "author": "Jane",
      "text": "Great breakdown of lifecycle hooks.",
      "postId": "5"
    },
    {
      "id": "2",
      "author": "Tom",
      "text": "Very useful for debugging issues.",
      "postId": "5"
    },
    {
      "id": "3",
      "author": "Kim",
      "text": "I wish I read this earlier.",
      "postId": "5"
    },
    {
      "id": "4",
      "author": "Ben",
      "text": "onUnmounted was new to me!",
      "postId": "5"
    },
    {
      "id": "1",
      "author": "Victor",
      "text": "Deployment made easy, thanks!",
      "postId": "6"
    },
    {
      "id": "1",
      "author": "Eliza",
      "text": "Love the idea of rapid prototyping!",
      "postId": "7"
    },
    {
      "id": "2",
      "author": "Moses",
      "text": "Helped me test a project idea fast.",
      "postId": "7"
    },
    {
      "id": "3",
      "author": "Janet",
      "text": "Very practical example.",
      "postId": "7"
    },
    {
      "id": "1",
      "author": "Samuel",
      "text": "Tailwind + Vue is a great combo.",
      "postId": "8"
    },
    {
      "id": "2",
      "author": "Chris",
      "text": "Nice overview of styling options.",
      "postId": "8"
    },
    {
      "id": "3",
      "author": "Angela",
      "text": "Scoped CSS makes my life easier.",
      "postId": "8"
    },
    {
      "id": "959b",
      "postId": "7",
      "text": "Interesting",
      "author": "Test User"
    },
    {
      "id": "3560",
      "postId": "2",
      "text": "What is the reactivity of sodium",
      "author": "JohnCena Otieno"
    },
    {
      "id": "39a0",
      "postId": "2",
      "text": "Wow! Loved Every Bit",
      "author": "Ian Evans"
    },
    {
      "id": "ebdb",
      "postId": null,
      "text": "This is a test comment",
      "author": "Test User"
    }
  ]
}